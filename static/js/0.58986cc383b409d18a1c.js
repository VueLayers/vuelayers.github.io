webpackJsonp([0],{1213:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(1223),a=t(1228),o=t(25),l=o(r.a,a.a,null,null,null);n.default=l.exports},1216:function(e,n,t){"use strict";var r={title:{type:String,required:!0},subtitle:String,color:String,bold:{type:Boolean,default:!0}};n.a={props:r}},1223:function(e,n,t){"use strict";var r=t(1216),a=t(1224),o=t(1225),l=t.n(o),s=t(1226),i=t.n(s),c=t(1227),p=t.n(c),u={},d={demo:function(){return{script:Object(a.a)(l.a),template:Object(a.c)(l.a),style:Object(a.b)(l.a)}},main:function(){return{script:i.a,style:p.a}}};n.a={name:"vld-demo-page",mixins:[r.a],props:u,computed:d}},1224:function(e,n,t){"use strict";function r(e){var n=e.match(/<script[^>]*>([\s\S]*)<\/script>/);return n?n[1]:""}function a(e){var n=e.match(/<template[^>]*>([\s\S]*)<\/template>/);return n?n[1]:""}function o(e){var n=e.match(/<style[^>]*>([\s\S]*)<\/style>/);return n?n[1]:""}n.a=r,n.c=a,n.b=o},1225:function(e,n){e.exports='<template>\n  <div :class="[$options.name]">\n    \x3c!-- app map --\x3e\n    <vl-map class="map" ref="map" :load-tiles-while-animating="true" :load-tiles-while-interacting="true"\n            @click="clickCoordinate = $event.coordinate" @postcompose="onMapPostCompose">\n      \x3c!-- map view aka ol.View --\x3e\n      <vl-view ref="view" :center="center" :zoom.sync="zoom" :rotation.sync="rotation"/>\n\n      \x3c!-- interactions --\x3e\n      <vl-interaction-select :features.sync="selectedFeatures">\n        <template scope="select">\n          \x3c!-- select styles --\x3e\n          <vl-style-box>\n            <vl-style-stroke color="#423e9e" :width="7"/>\n            <vl-style-fill :color="[254, 178, 76, 0.7]"/>\n            <vl-style-circle :radius="5">\n              <vl-style-stroke color="#423e9e" :width="7"/>\n              <vl-style-fill :color="[254, 178, 76, 0.7]"/>\n            </vl-style-circle>\n          </vl-style-box>\n          <vl-style-box :z-index="1">\n            <vl-style-stroke color="#d43f45" :width="2"/>\n            <vl-style-circle :radius="5">\n              <vl-style-stroke color="#d43f45" :width="2"/>\n            </vl-style-circle>\n          </vl-style-box>\n          \x3c!--// select styles --\x3e\n\n          \x3c!-- selected feature popup --\x3e\n          <vl-overlay class="feature-popup" v-for="feature in select.features" :key="feature.id" :id="feature.id"\n                      :position="pointOnSurface(feature.geometry)" :auto-pan="true">\n            <template scope="popup">\n              <vld-card>\n                <p slot="header" class="card-header-title">\n                  Feature ID {{ feature.id }}\n                </p>\n                <a slot="header" class="card-header-icon" title="Close"\n                   @click="selectedFeatures = selectedFeatures.filter(f => f.id !== feature.id)">\n                  <b-icon icon="close"/>\n                </a>\n\n                <div class="content">\n                  <p>\n                    Overlay popup content for Feature with ID <strong>{{ feature.id }}</strong>\n                  </p>\n                  <p>\n                    Popup: {{ JSON.stringify(popup) }}\n                  </p>\n                  <p>\n                    Feature: {{ JSON.stringify({ id: feature.id, properties: feature.properties }) }}\n                  </p>\n                </div>\n              </vld-card>\n            </template>\n          </vl-overlay>\n          \x3c!--// selected popup --\x3e\n        </template>\n      </vl-interaction-select>\n      \x3c!--// interactions --\x3e\n\n      \x3c!-- geolocation --\x3e\n      <vl-geoloc @update:position="onUpdatePosition">\n        <template scope="geoloc">\n          <vl-feature v-if="geoloc.position" id="position-feature">\n            <vl-geom-point :coordinates="geoloc.position"/>\n            <vl-style-box>\n              <vl-style-icon src="../static/img/marker.png" :scale="0.4" :anchor="[0.5, 1]"/>\n            </vl-style-box>\n          </vl-feature>\n        </template>\n      </vl-geoloc>\n      \x3c!--// geolocation --\x3e\n\n      \x3c!-- overlay marker with animation --\x3e\n      <vl-feature id="marker" ref="marker" :properties="{ start: Date.now(), duration: 2500 }">\n        <template scope="feature">\n          <vl-geom-point :coordinates="[-10, -10]"/>\n          <vl-style-box>\n            <vl-style-icon src="../static/img/flag.png" :scale="0.5" :anchor="[0.1, 0.95]" :size="[128, 128]"/>\n          </vl-style-box>\n          \x3c!-- overlay binded to feature --\x3e\n          <vl-overlay v-if="feature.geometry" :position="pointOnSurface(feature.geometry)" :offset="[10, 10]">\n            <p class="is-light box content">\n              Always opened overlay for Feature ID <strong>{{ feature.id }}</strong>\n            </p>\n          </vl-overlay>\n        </template>\n      </vl-feature>\n      \x3c!--// overlay marker --\x3e\n\n      \x3c!-- base layer --\x3e\n      <vl-layer-tile id="sputnik">\n        <vl-source-sputnik/>\n      </vl-layer-tile>\n\n      \x3c!-- other layers from config --\x3e\n      <component v-for="layer in layers" :is="layer.cmp" v-if="layer.visible" :key="layer.id" v-bind="layer">\n        \x3c!-- add vl-source-* --\x3e\n        <component :is="layer.source.cmp" v-bind="layer.source">\n          \x3c!-- add static features to vl-source-vector if provided --\x3e\n          <vl-feature v-if="layer.source.staticFeatures && layer.source.staticFeatures.length"\n                      v-for="feature in layer.source.staticFeatures" :key="feature.id"\n                      :id="feature.id" :properties="feature.properties">\n            <component :is="geometryTypeToCmpName(feature.geometry.type)" :coordinates="feature.geometry.coordinates"/>\n          </vl-feature>\n\n          \x3c!-- add inner source if provided (like vl-source-vector inside vl-source-cluster) --\x3e\n          <component v-if="layer.source.source" :is="layer.source.source.cmp" v-bind="layer.source.source">\n            \x3c!-- add static features to vl-source-vector if provided --\x3e\n            <vl-feature v-if="layer.source.source.staticFeatures && layer.source.source.staticFeatures.length"\n                        v-for="feature in layer.source.source.staticFeatures" :key="feature.id"\n                        :id="feature.id" :properties="feature.properties">\n              <component :is="geometryTypeToCmpName(feature.geometry.type)" :coordinates="feature.geometry.coordinates"/>\n            </vl-feature>\n          </component>\n        </component>\n        \x3c!--// vl-source-* --\x3e\n\n        \x3c!-- add style components if provided --\x3e\n        \x3c!-- create vl-style-box or vl-style-func --\x3e\n        <component v-if="layer.style" v-for="(style, i) in layer.style" :key="i" :is="style.cmp" v-bind="style">\n          \x3c!-- create inner style components: vl-style-circle, vl-style-icon, vl-style-fill, vl-style-stroke & etc --\x3e\n          <component v-if="style.styles" v-for="(st, cmp) in style.styles" :key="cmp" :is="cmp" v-bind="st">\n            \x3c!-- vl-style-fill, vl-style-stroke if provided --\x3e\n            <vl-style-fill v-if="st.fill" v-bind="st.fill"/>\n            <vl-style-fill v-if="st.stroke" v-bind="st.stroke"/>\n          </component>\n        </component>\n        \x3c!--// style --\x3e\n      </component>\n      \x3c!--// other layers --\x3e\n    </vl-map>\n    \x3c!--// app map --\x3e\n\n    \x3c!-- map panel, controls --\x3e\n    <div class="map-panel">\n      <b-panel :has-custom-template="true" :collapsible="true">\n        <strong slot="header">Map panel</strong>\n        <p class="panel-tabs">\n          <a @click="onMapPanelTabClick(\'state\')" :class="mapPanelTabClasses(\'state\')">State</a>\n          <a @click="onMapPanelTabClick(\'layers\')" :class="mapPanelTabClasses(\'layers\')">Layers</a>\n        </p>\n\n        <div class="panel-block" v-show="mapPanel.tab === \'state\'">\n          <table class="table is-fullwidth">\n            <tr>\n              <th>Map center</th>\n              <td>{{ center }}</td>\n            </tr>\n            <tr>\n              <th>Map zoom</th>\n              <td>{{ zoom }}</td>\n            </tr>\n            <tr>\n              <th>Map rotation</th>\n              <td>{{ rotation }}</td>\n            </tr>\n            <tr>\n              <th>Device coordinate</th>\n              <td>{{ deviceCoordinate }}</td>\n            </tr>\n            <tr>\n              <th>Selected features</th>\n              <td>{{ selectedFeatures.map(f => f.id) }}</td>\n            </tr>\n          </table>\n        </div>\n\n        <div class="panel-block" v-for="layer in layers" :key="layer.id" @click="onMapPanelLayerClick"\n             :class="{ \'is-active\': layer.visible }"\n             v-show="mapPanel.tab === \'layers\'">\n          <b-switch :key="layer.id" v-model="layer.visible">\n            {{ layer.title }}\n          </b-switch>\n        </div>\n      </b-panel>\n    </div>\n    \x3c!--// map panel, controls --\x3e\n  </div>\n</template>\n\n<script>\n  import { kebabCase, range, random } from \'lodash/fp\'\n  // import VueLayers core helpers\n  import { core as vlCore } from \'vuelayers\'\n  import pacmanFeaturesCollection from \'../static/sample-data/pacman.geojson\'\n\n  const methods = {\n    pointOnSurface: vlCore.geomHelper.pointOnSurface,\n    geometryTypeToCmpName (type) {\n      return \'vl-geom-\' + kebabCase(type)\n    },\n    pacmanStyleFunc () {\n      const pacman = [\n        vlCore.styleHelper.style({\n          strokeColor: \'#de9147\',\n          strokeWidth: 3,\n          fillColor: [222, 189, 36, 0.8],\n        }),\n      ]\n      const path = [\n        vlCore.styleHelper.style({\n          strokeColor: \'blue\',\n          strokeWidth: 1,\n        }),\n        vlCore.styleHelper.style({\n          imageRadius: 5,\n          imageFillColor: \'orange\',\n          geom (feature) {\n            // geometry is an LineString, convert it to MultiPoint to style vertex\n            return vlCore.geomHelper.multiPoint(feature.getGeometry().getCoordinates())\n          },\n        }),\n      ]\n      const eye = [\n        vlCore.styleHelper.style({\n          imageRadius: 6,\n          imageFillColor: \'#444444\',\n        }),\n      ]\n\n      return function __pacmanStyleFunc (feature) {\n        switch (feature.getId()) {\n          case \'pacman\':\n            return pacman\n          case \'pacman-path\':\n            return path\n          case \'pacman-eye\':\n            return eye\n        }\n      }\n    },\n    clusterStyleFunc () {\n      const cache = {}\n\n      return function __clusterStyleFunc (feature) {\n        const size = feature.get(\'features\').length\n        let style = cache[size]\n\n        if (!style) {\n          style = vlCore.styleHelper.style({\n            imageRadius: 10,\n            strokeColor: \'#fff\',\n            fillColor: \'#3399cc\',\n            text: size.toString(),\n            textFillColor: \'#fff\',\n          })\n          cache[size] = style\n        }\n        return [style]\n      }\n    },\n    selectFilter (feature) {\n      return [\'position-feature\'].indexOf(feature.getId()) === -1\n    },\n    onUpdatePosition (coordinate) {\n      this.deviceCoordinate = coordinate\n    },\n    onMapPostCompose ({ vectorContext, frameState }) {\n      if (!this.$refs.marker || !this.$refs.marker.$feature) return\n\n      const feature = this.$refs.marker.$feature\n      if (!feature.getGeometry() || !feature.getStyle()) return\n\n      const flashGeom = feature.getGeometry().clone()\n      const duration = feature.get(\'duration\')\n      const elapsed = frameState.time - feature.get(\'start\')\n      const elapsedRatio = elapsed / duration\n      const radius = vlCore.easingHelper.easeOut(elapsedRatio) * 35 + 5\n      const opacity = vlCore.easingHelper.easeOut(1 - elapsedRatio)\n      const fillOpacity = vlCore.easingHelper.easeOut(0.5 - elapsedRatio)\n\n      vectorContext.setStyle(vlCore.styleHelper.style({\n        imageRadius: radius,\n        fillColor: [119, 170, 203, fillOpacity],\n        strokeColor: [119, 170, 203, opacity],\n        strokeWidth: 2 + opacity,\n      }))\n\n      vectorContext.drawGeometry(flashGeom)\n      vectorContext.setStyle(feature.getStyle()(feature)[0])\n      vectorContext.drawGeometry(feature.getGeometry())\n\n      if (elapsed > duration) {\n        feature.set(\'start\', Date.now())\n      }\n\n      this.$refs.map.render()\n    },\n    // map panel\n    mapPanelTabClasses (tab) {\n      return {\n        \'is-active\': this.mapPanel.tab === tab,\n      }\n    },\n    onMapPanelLayerClick (layer) {\n      layer.visible = !layer.visible\n    },\n    onMapPanelTabClick (tab) {\n      this.mapPanel.tab = tab\n    },\n  }\n\n  export default {\n    name: \'vld-demo-app\',\n    methods,\n    data () {\n      return {\n        center: [0, 0],\n        zoom: 2,\n        rotation: 0,\n        clickCoordinate: undefined,\n        selectedFeatures: [],\n        deviceCoordinate: undefined,\n        mapPanel: {\n          tab: \'state\',\n        },\n        layers: [\n          {\n            id: \'pacman\',\n            title: \'Pacman\',\n            cmp: \'vl-layer-vector\',\n            visible: false,\n            source: {\n              cmp: \'vl-source-vector\',\n              staticFeatures: pacmanFeaturesCollection.features,\n            },\n            style: [\n              {\n                cmp: \'vl-style-func\',\n                factory: this.pacmanStyleFunc,\n              },\n            ],\n          },\n          {\n            id: \'countries\',\n            title: \'Countries\',\n            cmp: \'vl-layer-vector\',\n            visible: false,\n            source: {\n              cmp: \'vl-source-vector\',\n              url: \'https://openlayers.org/en/latest/examples/data/geojson/countries.geojson\',\n            },\n            style: [\n              {\n                cmp: \'vl-style-box\',\n                styles: {\n                  \'vl-style-fill\': {\n                    color: [255, 255, 255, 0.5],\n                  },\n                  \'vl-style-stroke\': {\n                    color: \'#219e46\',\n                    width: 2,\n                  },\n                },\n              },\n            ],\n          },\n          {\n            id: \'wms\',\n            title: \'WMS\',\n            cmp: \'vl-layer-tile\',\n            visible: false,\n            source: {\n              cmp: \'vl-source-wms\',\n              url: \'https://ahocevar.com/geoserver/wms\',\n              layers: \'topp:states\',\n              extParams: { TILED: true },\n              serverType: \'geoserver\',\n            },\n          },\n          {\n            id: \'wmts\',\n            title: \'WMTS\',\n            cmp: \'vl-layer-tile\',\n            visible: false,\n            source: {\n              cmp: \'vl-source-wmts\',\n              url: \'https://services.arcgisonline.com/arcgis/rest/services/Demographics/USA_Population_Density/MapServer/WMTS/\',\n              layerName: \'0\',\n              matrixSet: \'EPSG:3857\',\n              format: \'image/png\',\n              styleName: \'default\',\n            },\n          },\n          {\n            id: \'cluster\',\n            title: \'Cluster\',\n            cmp: \'vl-layer-vector\',\n            visible: false,\n            source: {\n              cmp: \'vl-source-cluster\',\n              distance: 40,\n              source: {\n                cmp: \'vl-source-vector\',\n                features: range(0, 20000).map(i => {\n                  let coordinate = [random(-50, 50), random(-50, 50)]\n\n                  return {\n                    type: \'Feature\',\n                    id: \'random-\' + i,\n                    geometry: {\n                      type: \'Point\',\n                      coordinates: coordinate,\n                    },\n                  }\n                }),\n              },\n            },\n            style: [\n              {\n                cmp: \'vl-style-func\',\n                factory: this.clusterStyleFunc,\n              },\n            ],\n          },\n        ],\n      }\n    },\n  }\n<\/script>\n\n<style lang="sass">\n  @import ../styles/variables\n\n  .vld-demo-app\n    position: relative\n    .map\n      height: 500px\n    .map-panel\n      padding: 0\n      .panel-heading\n        box-shadow: 0 .25em .5em transparentize($dark, 0.8)\n      .panel-content\n        background: $white\n        box-shadow: 0 .25em .5em transparentize($dark, 0.8)\n      +widescreen()\n        position: absolute\n        top: 0\n        right: 0\n        max-height: 500px\n        width: 20em\n    .feature-popup\n      position: absolute\n      left: -50px\n      bottom: 12px\n      width: 20em\n      max-width: none\n      &:after, &:before\n        top: 100%\n        border: solid transparent\n        content: \' \'\n        height: 0\n        width: 0\n        position: absolute\n        pointer-events: none\n      &:after\n        border-top-color: white\n        border-width: 10px\n        left: 48px\n        margin-left: -10px\n      &:before\n        border-top-color: #cccccc\n        border-width: 11px\n        left: 48px\n        margin-left: -11px\n      .card-content\n        max-height: 20em\n        overflow: auto\n      .content\n        word-break: break-all\n</style>\n'},1226:function(e,n){e.exports="import 'babel-polyfill'\nimport Vue from 'vue'\nimport Buefy from 'buefy'\nimport VueLayers from 'vuelayers'\nimport App from './app.vue'\nimport DocsComponents from './components'\nimport router from './router'\n\nVue.use(Buefy, {\n  defaultIconPack: 'fa',\n})\nVue.use(VueLayers)\nVue.use(DocsComponents)\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  router,\n  render: h => h(App),\n})\n"},1227:function(e,n){e.exports="/*! VueLayers.js docs site */\n@import variables\n@import ~highlight.js/styles/atom-one-light\n// import VueLayers styles\n@import ~vuelayers/lib/style\n// Import Buefy styles\n@import ~bulma/bulma\n@import ~buefy/src/scss/buefy\n\nhtml, body\n  height: 100%\n  width: 100%\n  box-sizing: border-box\n\nhtml *\n  box-sizing: border-box\n\n// helpers\n.is-wh-100\n  width: 100%\n  height: 100%\n\n.is-flex-column\n  display: flex\n  flex-flow: column nowrap\n\n.is-flex-grow\n  flex-grow: 1\n\n.is-flex-justify-center\n  justify-content: center\n\n.is-relative\n  position: relative\n\n.is-fullheight\n  min-height: 100vh\n\n.hljs\n  background: $code-background\n  padding: $code-padding\n\n.content\n  .title\n    font-size: 2rem\n    font-weight: 600\n    line-height: 1.125\n  .subtitle\n    font-weight: 400\n    font-size: 1.25rem\n    line-height: 1.25\n  .tabs\n    ul\n      list-style: none\n      margin-left: 0\n      margin-top: 0\n    li + li\n      margin-top: 0\n\n.buttons\n  margin: .5rem 0\n  .button\n    margin: .25rem 0\n    display: flex\n    &:first-child\n      margin-top: 0\n    &:last-child\n      margin-bottom: 0\n  +tablet()\n    display: flex\n    justify-content: center\n    .button\n      margin: 0 .25rem\n      &:first-child\n        margin-left: 0\n      &:last-child\n        margin-right: 0\n\n.github-buttons\n  margin: .5rem 0\n  display: flex\n  justify-content: center\n  .github-button\n    margin: 0 .25em\n    display: flex\n    &:first-child\n      margin-left: 0\n    &:last-child\n      margin-right: 0\n\n// transitions\n.fade-enter-active, .fade-leave-active\n  transition: opacity .5s\n.fade-enter, .fade-leave-to\n  opacity: 0\n\n.fade-delayed-enter-active, .fade-delayed-leave-active\n  transition: opacity .5s\n.fade-delayed-enter-active\n  transition-delay: .3s\n.fade-delayed-enter, .fade-delayed-leave\n  opacity: 0\n"},1228:function(e,n,t){"use strict";var r=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{class:[e.$options.name]},[t("vld-hero",{attrs:{bold:e.bold,color:e.color}},[t("h1",{staticClass:"title"},[e._v(e._s(e.title))]),t("h2",{staticClass:"subtitle"},[e._v(e._s(e.subtitle))])]),t("vld-demo-app"),t("section",{staticClass:"section content"},[t("h3",[e._v("Demo sources")]),t("b",[e._v("main.js")]),t("b-tabs",[t("b-tab-item",{attrs:{label:"JS"}},[t("vld-code",{attrs:{lang:"js"}},[e._v(e._s(e.main.script))])],1),t("b-tab-item",{attrs:{label:"SASS"}},[t("vld-code",{attrs:{lang:"styl"}},[e._v(e._s(e.main.style))])],1)],1),t("b",[e._v("demo-app.vue")]),t("b-tabs",[t("b-tab-item",{attrs:{label:"JS"}},[t("vld-code",{attrs:{lang:"js"}},[e._v(e._s(e.demo.script))])],1),t("b-tab-item",{attrs:{label:"HTML"}},[t("vld-code",{attrs:{lang:"html"}},[e._v(e._s(e.demo.template))])],1),t("b-tab-item",{attrs:{label:"SASS"}},[t("vld-code",{attrs:{lang:"styl"}},[e._v(e._s(e.demo.style))])],1)],1)],1)],1)},a=[],o={render:r,staticRenderFns:a};n.a=o}});
//# sourceMappingURL=0.58986cc383b409d18a1c.js.map